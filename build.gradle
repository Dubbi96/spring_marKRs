// 플러그인(그래들 태스크 집합) 등록
plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

// bootBuildInfo 태스크 등록
// build/resources/main/META-INF/build-info.properties 파일을 생성함
// 참고: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
springBoot {
	buildInfo()
}

// 프로젝트 정보
// project.property, ${property} 형식으로 접근함
// 참고: https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A
group = 'com.tmax'
// settings.gradle에서 rootProject.name으로 미리 선언됨
// name = 'SampleProject'
version = '0.0.1-SNAPSHOT' // 프로젝트 버전
sourceCompatibility = '17' // JDK 버전

// 외부 라이브러리 저장소 등록
// 참고: https://docs.gradle.org/current/userguide/declaring_repositories.html
repositories {
	mavenCentral() // 메이븐이 그래들보다 앞서 만들어져서 많은 라이브러리들이 메이븐 저장소에 등록됨
}

// key, value 형식 프로젝트 추가(extra) 정보
// project.property, ${property} 형식으로 접근함
// 참고: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
ext {
	set('springCloudVersion', "2021.0.3")
	set('generated', 'src/main/generated')
}

// 사용 라이브러리 목록
// implementation: 컴파일(배포/테스트) + 런타임(배포/테스트)에 사용됨
// testImplementation: 컴파일(테스트) + 런타임(테스트)에 사용됨
// compileOnly: 컴파일(배포/테스트)에 사용됨
// annotationProcessor: 컴파일 도중 어노테이션에만 사용됨
// developmentOnly: 컴파일에도 사용되지 않음
// 참고: https://docs.gradle.org/current/userguide/declaring_dependencies.html
// 참고: https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations
dependencies {
	// MVC 구조 RESTful API를 개발, 제공하기 위한 스프링 부트 라이브러리
	// 톰캣을 WAS로 사용함
	// 참고: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//cache
	//implementation 'org.springframework.boot:spring-boot-starter-cache'
	//implementation group : 'net.sf.ehcache', name : 'ehcache', version : '2.10.6'

	// 스프링 부트 서비스의 건강상태를 검사할 수 있는 도구 라이브러리
	// 참고: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// JPA 구현체로 Hibernate를 사용하기 위한 라이브러리
	// 참고: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// JPA 제약조건 어노테이션(예: @NotNull, @Min, @Max)을 사용하기 위한 라이브러리
	// 참고: https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// JSP 활용 implementation
	implementation "org.apache.tomcat.embed:tomcat-embed-jasper"
	implementation "javax.servlet:jstl"

	//db를 postgresql -> h2로 변경하였습니다.
	runtimeOnly 'org.postgresql:postgresql'
	//implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	//view 설정을 위한 thymeleaf 설정
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'io.springfox:springfox-bean-validators:3.0.0'
    implementation 'org.jetbrains:annotations:20.1.0'
	testImplementation 'junit:junit:4.13.2'

	//test에서 assertj 추가하였습니다.
	testImplementation 'org.assertj:assertj-core:3.24.2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "com.querydsl:querydsl-jpa:5.0.0"
	implementation "com.querydsl:querydsl-core:5.0.0"
	implementation "com.querydsl:querydsl-collections:5.0.0"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	compileOnly 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-core'
	implementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.springframework.security:spring-security-test'

	implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
	implementation 'org.modelmapper:modelmapper:2.4.4'

	//front - mustache 의존성 추가
	//complieOnly 'org.springframework.boot:spring-boot-starter-mustache'
	//session에서 관리
	//compileOnly 'org.springframework.session:spring-session-jdbc'

}

// io.spring.dependency-management가 제공하는 Maven 형태 라이브러리 관리
// Gradle에서 dependencies { implementation platform(...) } 꼴로 동일한 효과를 볼 수 있음
// 참고: https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/
// 참고: https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import
// dependencyManagement {
// 	imports {
// 		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
// 	}
// }

// test라는 태스크가 JUnit 기반 단위 테스트를 자동으로 실행함
// 참고: https://docs.gradle.org/current/userguide/more_about_tasks.html
// 참고: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html
// tasks.named('test') {
// 	useJUnitPlatform()
// }

// Test 관련 모든 태스크가 JUnit 기반 단위 테스트를 자동으로 실행함
tasks.withType(Test) {
	useJUnitPlatform()
}

// Querydsl 설정부
// def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(project.generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets.main.java.srcDirs += [ project.generated ]

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(project.generated)
}